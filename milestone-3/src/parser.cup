import java.io.*;
import java.util.ArrayList;

parser code {:
    StringBuilder output = new StringBuilder("");
    int tempVariableCounter = 0;
	int labelCounter = 0;
    void outputWithLinebreak(String str) {
        output.append(str);
        output.append(System.getProperty("line.separator"));
    }

    void generateAssignmentStatement(Object id, Object expression) {
        outputWithLinebreak(String.format("%s = %s", id.toString(), expression.toString()));
    }

    String generateTempVariable() {
        return "t" + tempVariableCounter++;
    }
    String generateLabel() {
        return "L" + labelCounter++;
    }

    void appendTACExpression(Object tempName, Object leftExpr, Object operator, Object rightExpr) {
        String exp = String.format("%s = %s%s%s", tempName.toString(), leftExpr.toString(), operator.toString(), rightExpr.toString());

        outputWithLinebreak(exp);
    }

    void appendFunctionBegin(Object functionName) {
        outputWithLinebreak(String.format("%s:", functionName.toString()));
        outputWithLinebreak("begin_func;");
    }

    void appendFunctionCall(Object tempName, Object name, Object args) {
        ArrayList<String> arguments = (ArrayList) args;

        // arguments to push before call
        if(!arguments.isEmpty()) {
            for(String arg: arguments) {
                outputWithLinebreak(String.format("push_params: %s", arg.toString()));
            }
        }

        // Call the function, assign to the temp var
        outputWithLinebreak(String.format("%s= call %s", tempName.toString(), name.toString()));

        // pop args if any
        if(!arguments.isEmpty()) {
            outputWithLinebreak("pop_params;");
        }
    }

    void appendShortVarThing(Object ids, Object expression) {
		//System.out.println(expression);
        ArrayList<String> idList = (ArrayList) ids;

        StringBuilder builder = new StringBuilder();

        while(!idList.isEmpty()) {
            builder.append(idList.remove(0));
            builder.append(",");
        }

        // Remove last comma like a boss !
        builder.setLength(builder.length() - 1);

        builder.append(" = ").append(expression.toString());

        outputWithLinebreak(builder.toString());
    }
	String generateDecOutput(Object e, Object o){
		String assem = (((Container) e).getAssem());
		if(!assem.equals("")) assem += "\n";
		return assem + o.toString() + " = " + (((Container) e).getVal());
	}
	String generateDecOutput(Object e, Object o, Object t){
		String assem = (((Container) e).getAssem());
		if(!assem.equals("")) assem += "\n";
		return assem + o.toString() + t.toString() + " = " + (((Container) e).getVal());
	}

	Container generateExContainer(Object e, Object e2, Object op){
		String assem1 = (((Container) e).getAssem());
		String assem2 = (((Container) e2).getAssem());
		String val = generateTempVariable();
		if(!assem1.equals("")) assem1 += "\n";
		assem1 += assem2;
		if(!assem2.equals("")) assem1 += "\n";
		assem1 += val + " =" + (((Container) e).getVal()) + op.toString() + (((Container) e2).getVal()) + ";\n";
		return new Container(val, assem1);
	}
	Container generateSingleExContainer(Object e, Object op){
		String assem = (((Container) e).getAssem());
		String val = generateTempVariable();
		if(!assem.equals("")) assem += "\n";
		assem += val + " = " + op + (((Container) e).getVal());
		return new Container(val, assem);
	}
    String generateOutput() {
        return output.toString();
    }
:}



/* Terminals (tokens returned by the scanner). */
terminal			BREAK, DEFAULT, FUNC, CASE, STRUCT, ELSE, PACKAGE, SWITCH, CONST, IF,
					TYPE, FOR, IMPORT, RETURN, VAR, OR_OP, AND_OP, PLUS, MINUS, OPEN_PARAN,
					CLOSE_PARAN, OPEN_CURLY, CLOSE_CURLY, OPEN_SQUARE, CLOSE_SQUARE,
					SEMI_COLON, COMMA, DOT, COLON, COLON_EQUAL, EQUAL, CDOTS, ASTRISK,
					SHIFT_LEFT, SHIFT_RIGHT, BAR, SLASH, EXCLAMATION, LESS_DASH, AMBERSAND,
					PERCENT, INCREMENT, DECREMENT;
terminal	String	IDENTIFIER, REL_OP, STRING_LIT, INTLIT;

/* Non-terminals */
nonterminal	sourceFile, packageClause, importDecls, importDecl, topLevelDecls,
					topLevelDecl, packageName, importSpecs, importSpec, importPath,
					optionalSemiColon, declaration, functionDecl, methodDecl,
					constDecl, typeDecl, varDecl, constSpecs, constSpec, identifierList,
					expressionList, expression, binaryOp, primaryExpr,
					unaryExpr, unaryOp, mulOp, addOp, operand, selector,
					arguments, literal, operandName, methodExpr, basicLit, functionLit,
					qualifiedIdent, function, signature, functionBody, parameters, result,
					type, parameterList, parameterDecl, block, statementList, statement,
					typeName, typeLit, arrayType, structType, functionType, arrayLength,
					elementType, sliceType, fieldDecls, fieldDecl, anonymousField,
					typeSpecs, typeSpec, varSpecs, varSpec, shortVarDecl, functionName,
					methodName, receiver, receiverType, simpleStmt, returnStmt, breakStmt,
					ifStmt, switchStmt, forStmt, expressionStmt, incDecStmt, assignment,
					assignOp, exprSwitchStmt, initStmt, postStmt, condition, forClause,
					exprCaseClauses, exprCaseClause, exprSwitchCase, compositeLit,
					literalType, literalValue, elementList, keyedElement, key, fieldName,
					element;

precedence left OR_OP, AND_OP;
precedence left REL_OP;
precedence left PLUS, MINUS;
precedence left ASTRISK, SLASH, SHIFT_LEFT, SHIFT_RIGHT, PERCENT, AMBERSAND;
precedence left EXCLAMATION, LESS_DASH;
precedence left OPEN_PARAN, CLOSE_PARAN;
precedence left COMMA, SEMI_COLON;
precedence left COLON;

start with sourceFile;

/* The grammar */
sourceFile	::=	packageClause optionalSemiColon importDecls topLevelDecls:decs
				{:
				    RESULT = decs;
				:}
				| packageClause optionalSemiColon importDecls
				{:
				    RESULT = "";
				:};

topLevelDecls	::=	topLevelDecl:dec topLevelDecls:decs
					{:
						RESULT = dec + "\n" + decs;
					:}
					| topLevelDecl:dec
					{:
						RESULT = dec;
					:};

topLevelDecl	::=	declaration:dec
					{:
						//System.out.println("Engz " + dec);
						RESULT = dec;
					:}
					| functionDecl:fdec optionalSemiColon
					{:
						//System.out.println("Engz2 " + fdec);
						RESULT = fdec;
					:}
					| methodDecl:mdec optionalSemiColon
					{:
						RESULT = mdec;
					:};

declaration	::=	constDecl:dec SEMI_COLON
				{:
					RESULT = dec;
				:}
				| varDecl:dec SEMI_COLON
				{:
					//System.out.println("var: " + dec);
					RESULT = dec;
				:};

constDecl	::=	CONST constSpec:con
				{:
					//System.out.println("HNAL " + con);
					RESULT = con;
				:}
				| CONST OPEN_PARAN constSpecs:cons CLOSE_PARAN
				{:
					RESULT = cons;
				:}
				| CONST OPEN_PARAN CLOSE_PARAN
				{:
					RESULT = "";
				:};


constSpecs	::=	constSpec:con SEMI_COLON constSpecs:cons
				{:
					RESULT = con + "" + cons;
				:}
				| constSpec:con SEMI_COLON
				{:
					RESULT = con;
				:};

constSpec	::=	IDENTIFIER:id
				{:
					RESULT = id;
				:}
				| IDENTIFIER:id EQUAL expression:exp
				{:
				    RESULT = generateDecOutput(exp, id);
				:}
				| IDENTIFIER:id type:t EQUAL expression:exp
				{:
				    RESULT = generateDecOutput(exp, id, t);
				:};


statement	::=	declaration:dec
				{:
					//System.out.println("Engz3 " + dec);
					RESULT = dec;
				:}
				| simpleStmt:stat SEMI_COLON
				{:
					//System.out.println("Engz4 " + stat);
					RESULT = stat;
				:}
				| returnStmt:ret SEMI_COLON
				{:
					RESULT = ret;
				:}
				| breakStmt:br SEMI_COLON
				{:
					RESULT = "";
				:}
				| block:bl optionalSemiColon
				{:				
					RESULT = bl;
				:}
				| ifStmt:ifStat optionalSemiColon
				{:
					//System.out.println("Engz12: " + ifStat);
					RESULT = ifStat;
				:}
				| switchStmt: optionalSemiColon
				{:
				:}
				| forStmt optionalSemiColon
				{:
				:};


simpleStmt	::= expressionStmt:ex
				{:
					RESULT = ex;
				:}
				| incDecStmt:stat
				{:
					RESULT = stat;
				:}
				| assignment:assign
				{:
					RESULT = (((Container) assign).getAssem());
				:}
				| shortVarDecl:dec
				{:
					RESULT = dec;
				:};


expressionStmt	::= expression:e
					{:
						RESULT = (((Container) e).getAssem());
					:};

incDecStmt	::= expression INCREMENT
				{:
				:}
				| expression DECREMENT
				{:
				:};

assignment	::=	expressionList:l1 assignOp:op expressionList:l2
				{:
				    // ArrayList<String> expList1 = (ArrayList) l1;
				    // ArrayList<String> expList2 = (ArrayList) l2;

				    // RESULT = l1.toString() + op.toString() + l2.toString();
				    String val1 = (((Container) l1).getVal());
				    if(val1.equals("")) RESULT = new Container("", "");
				    else {
					    String val2 = (((Container) l2).getVal());
						String assemNew = (((Container) l2).getAssem()) + "\n" + val1 + op + val2 + ";\n";
						RESULT = new Container(val2, assemNew);
				    }
				:};


ifStmt	::=	IF expression:e block:bl
			{:
				Container con = (Container) e;
				con.setThenL(generateLabel());
				con.setElseL(generateLabel());
				RESULT = "";
				if(!con.getAssem().equals("")) {
					RESULT += con.getAssem() + "\n"; 
				}
				RESULT += "If " + con.getVal() + " Goto " + con.getThenL();
				RESULT += "\nGoto " + con.getElseL() + "\n";
				RESULT += con.getThenL() + ":\n" + bl;
				RESULT += con.getElseL() + ":";
			:}
			| IF simpleStmt:stmt SEMI_COLON expression:e block:bl
			{:
				Container con = (Container) e;
				con.setThenL(generateLabel());
				con.setElseL(generateLabel());
				RESULT = "";
				if(!stmt.equals("")){
					RESULT += stmt + "\n";
				} 
				if(!con.getAssem().equals("")) {
					RESULT += con.getAssem() + "\n"; 
				}
				RESULT += "If " + con.getVal() + " Goto " + con.getThenL();
				RESULT += "\nGoto " + con.getElseL() + "\n";
				RESULT += con.getThenL() + ":\n" + bl;
				RESULT += con.getElseL() + ":";
			:}
			| IF expression:e block:bl ELSE ifStmt:st
			{:
				Container con = (Container) e;
				con.setThenL(generateLabel());
				con.setElseL(generateLabel());
				RESULT = "";
				if(!con.getAssem().equals("")) {
					RESULT += con.getAssem() + "\n"; 
				}
				RESULT += "If " + con.getVal() + " Goto " + con.getThenL();
				RESULT += "\nGoto " + con.getElseL() + "\n";
				RESULT += con.getThenL() + ":\n" + bl + "\n";
				RESULT += "GoTo L" + con.getThenL() + "\n";
				RESULT += con.getElseL() + ":\n" + st + "\nL" + con.getThenL() + ":";
			:}
			| IF expression:e block:bl1 ELSE block:bl2
			{:
				Container con = (Container) e;
				con.setThenL(generateLabel());
				con.setElseL(generateLabel());
				RESULT = "";
				if(!con.getAssem().equals("")) {
					RESULT += con.getAssem() + "\n"; 
				}
				RESULT += "If " + con.getVal() + " Goto " + con.getThenL();
				RESULT += "\nGoto " + con.getElseL() + "\n";
				RESULT += con.getThenL() + ":\n" + bl1 + "\n";
				RESULT += "GoTo L" + con.getThenL() + "\n"; 
				RESULT += con.getElseL() + ":\n" + bl2 + "\nL" + con.getThenL() + ":";
			:}
			| IF simpleStmt:stmt SEMI_COLON expression:e block:bl ELSE ifStmt:st
			{:
				Container con = (Container) e;
				con.setThenL(generateLabel());
				con.setElseL(generateLabel());
				RESULT = "";
				if(!stmt.equals("")){
					RESULT += stmt + "\n";
				} 
				if(!con.getAssem().equals("")) {
					RESULT += con.getAssem() + "\n"; 
				}
				RESULT += "If " + con.getVal() + " Goto " + con.getThenL();
				RESULT += "\nGoto " + con.getElseL() + "\n";
				RESULT += con.getThenL() + ":\n" + bl + "\n" ;
				RESULT += "GoTo L" + con.getThenL() + "\n";
				RESULT += con.getElseL() + ":\n" + st + "\nL" + con.getThenL() + ":";
			:}
			| IF simpleStmt:stmt SEMI_COLON expression:e block:bl1 ELSE block:bl2
			{:
				Container con = (Container) e;
				con.setThenL(generateLabel());
				con.setElseL(generateLabel());
				RESULT = "";
				if(!stmt.equals("")){
					RESULT += stmt + "\n";
				} 
				if(!con.getAssem().equals("")) {
					RESULT += con.getAssem() + "\n"; 
				}
				RESULT += con.getThenL() + ":\n" + bl1 + "\n" ;
				RESULT += "GoTo L" + con.getThenL() + "\n"; 
				RESULT += con.getElseL() + ":\n" + bl2 + "\nL" + con.getThenL() + ":";
			:};


switchStmt	::=	exprSwitchStmt
				{:
				:};


exprSwitchStmt	::= SWITCH OPEN_CURLY exprCaseClauses CLOSE_CURLY
					{:
					:}
					| SWITCH  simpleStmt SEMI_COLON OPEN_CURLY exprCaseClauses CLOSE_CURLY
					{:
					:}
					| SWITCH expression OPEN_CURLY exprCaseClauses CLOSE_CURLY
					{:
					:}
					| SWITCH simpleStmt SEMI_COLON expression OPEN_CURLY exprCaseClauses CLOSE_CURLY
					{:
					:};


exprCaseClauses	::=	exprCaseClause exprCaseClauses
					{:
					:}
					|
					{:
					:};

exprCaseClause	::= exprSwitchCase COLON statementList
					{:
					:};

exprSwitchCase	::=	CASE expressionList
					{:
					:}
					| DEFAULT
					{:
					:};


forStmt	::=	FOR block
			{:
			:}
			| FOR condition block
			{:
			:}
			| FOR forClause block
			{:
			:};


forClause	::=	initStmt SEMI_COLON condition SEMI_COLON postStmt
				{:
				:}
				| SEMI_COLON condition SEMI_COLON postStmt
				{:
				:}
				| initStmt SEMI_COLON SEMI_COLON postStmt
				{:
				:}
				| initStmt SEMI_COLON condition optionalSemiColon
				{:
				:}
				| SEMI_COLON SEMI_COLON postStmt
				{:
				:}
				| SEMI_COLON condition optionalSemiColon
				{:
				:}
				| initStmt SEMI_COLON optionalSemiColon
				{:
				:}
				| SEMI_COLON optionalSemiColon
				{:
				:};


condition	::=	expression:e
				{:
					((Container) e).raiseFlag();
					RESULT = e;
				:};

initStmt	::=	simpleStmt:ss
				{:
					RESULT = ss;
				:};


postStmt	::=	simpleStmt:ss
				{:
					RESULT = ss;
				:};


returnStmt	::=	RETURN
				{:
					RESULT = "return";
				:}
				| RETURN expressionList:e
				{:
					String assem = (((Container) e).getAssem());
					RESULT = "return ";
					if(assem.equals(""))
						RESULT += (((Container) e).getVal());
					else
						RESULT += assem;
					RESULT += ";";
				:};


breakStmt	::=	BREAK
				{:
					RESULT = "";
				:};



identifierList	::=	IDENTIFIER:id
					{:
					    //ArrayList<String> list = new ArrayList<String>();
					    //list.add(id.toString());
					    RESULT = id;
					:}
					| IDENTIFIER:id COMMA identifierList:tail
					{:
                       // ArrayList<String> list = (ArrayList) tail;
                       // list.add(id.toString());
                        RESULT = id + "," + tail;
					:};

expressionList	::=	expression:e
					{:
					    //ArrayList<String> expressionList = new ArrayList<String>();
					    //expressionList.add(e.toString());
					    RESULT = e;
					:}
					| expression:e COMMA expressionList:tail
					{:
              RESULT = new Container(((Container) e).getVal() + "," + ((Container) tail).getVal(),"");
					:};


expression	::=	unaryExpr:ue
				{:
				    RESULT = ue;
				:}
				| expression:el REL_OP:op expression:er
				{:
                    RESULT = generateExContainer(el, er, op);
				:}
				| expression:el OR_OP:op expression:er
				{:
                    RESULT = generateExContainer(el, er, op);
				:}
				| expression:el PLUS:op expression:er
				{:
                    RESULT = generateExContainer(el, er, op);
				:}
				| expression:el MINUS:op expression:er
				{:
                    RESULT = generateExContainer(el, er, op);
				:}
				| expression:el ASTRISK:op expression:er
				{:
                    RESULT = generateExContainer(el, er, op);
				:}
				| expression:el SLASH:op expression:er
				{:
                    RESULT = generateExContainer(el, er, op);
				:}
				| expression:el PERCENT:op expression:er
				{:
                    RESULT = generateExContainer(el, er, op);
				:}
				| expression:el AND_OP:op expression:er
				{:
                    RESULT = generateExContainer(el, er, op);
				:}
				| expression:el SHIFT_LEFT:op expression:er
				{:
                    RESULT = generateExContainer(el, er, op);
				:}
				| expression:el SHIFT_RIGHT:op expression:er
				{:
                    RESULT = generateExContainer(el, er, op);
				:}
				| expression:el AMBERSAND:op expression:er
				{:
                    RESULT = generateExContainer(el, er, op);
				:}
				| expression:el EXCLAMATION:op expression:er
				{:
                    RESULT = generateExContainer(el, er, op);
                :};

type	::= typeName
			{:
				RESULT = "";
			:}
			| typeLit
			{:
				RESULT = "";
			:};


typeName	::=	IDENTIFIER:id
				{:
				    RESULT = "";
				:};


typeLit	::=	functionType
			{:
				RESULT = "";
			:}
			;


functionType	::=	FUNC signature
					{:
						RESULT = "";
					:};


varDecl	::=	VAR varSpec:v
			{:
				RESULT = v;
			:}
			| VAR OPEN_PARAN varSpecs:v CLOSE_PARAN
			{:
				RESULT = v;
			:};


varSpecs	::= varSpec:v SEMI_COLON varSpecs:vs
				{:
					RESULT = v + "" + vs;
				:}
				|
				{:
					RESULT = "";
				:};

varSpec	::= IDENTIFIER:var EQUAL expression:e
			{:
				RESULT = generateDecOutput(e, var);
			    //generateAssignmentStatement(var, e);
			:}
			| IDENTIFIER:id type:ty
			{:
				RESULT = id + "" + ty;
			:}
			| IDENTIFIER:var type EQUAL expression:e
			{:
			    RESULT = generateDecOutput(e, var);
			:};



shortVarDecl	::= identifierList:ids	COLON_EQUAL expression:e
					{:
					   // This was a pretty annoying one -_-
			    		RESULT = generateDecOutput(e, ids);
					:};


functionDecl	::= FUNC functionName:fName function:func
					{:
					   RESULT = fName + ":\n" + func;
					:}
					| FUNC functionName signature
					{:
						RESULT = "";
					:};

functionName	::= IDENTIFIER:fname
					{:
						RESULT = fname;
					:};


methodDecl	::= FUNC receiver methodName function
				{:
					RESULT = "";
				:}
				| FUNC receiver methodName signature
				{:
					RESULT = "";
				:};

receiver	::= parameters
				{:
					RESULT = "";
				:};


methodName	::=	IDENTIFIER:id
				{:
					RESULT = id;
				:};


unaryExpr	::=	primaryExpr:pexp
				{:
                    RESULT = pexp;
				:}
				| unaryOp:uOp unaryExpr:uexp
				{:
					RESULT = generateSingleExContainer(uexp, uOp);
				:};

primaryExpr	::=	operand:op
				{:
				    RESULT = op;
				:}
				| primaryExpr:pexp arguments:args
				{:
                    String tmp = generateTempVariable();
					String assem = args + tmp + "= call " + (((Container) pexp).getVal()) + ";\n" + "pop_params;\n";
                    //appendFunctionCall(tmp, pexp, args);
					RESULT = new Container(tmp, assem);
				:};



selector	::= DOT IDENTIFIER
				{:
					RESULT = "";
				:};

arguments	::=	OPEN_PARAN CLOSE_PARAN
				{:
				    RESULT = ""; // Empty args
				:}
				| OPEN_PARAN expressionList:args CLOSE_PARAN
				{:
				    RESULT = "";
            String argsS = (((Container) args).getVal());
				    for(String s: argsS.split(",")) RESULT += "push_params: " + s +";\n";
				:}
				| OPEN_PARAN TYPE type COMMA expressionList CLOSE_PARAN
				{:
					RESULT = "";
				:};


methodExpr	::=	DOT receiverType DOT methodName
				{:
					RESULT = "";
				:};


receiverType	::=	OPEN_PARAN ASTRISK typeName CLOSE_PARAN
					{:
						RESULT = "";
					:}
					| OPEN_PARAN typeName CLOSE_PARAN
					{:
						RESULT = "";
					:};

operand	::=	literal:l
			{:
			    RESULT = l;
			:}
			| operandName:op_name
			{:
			    RESULT = op_name;
			:}
			| methodExpr:mexpr
			{:
			    RESULT = new Container("1","1");
			:}
			| OPEN_PARAN expression:e CLOSE_PARAN
			{:
			    RESULT = e;
			:};

literal	::=	basicLit:l
			{:
			    RESULT = l;
			:}
			| functionLit:funcLit
			{:
				RESULT = new Container(funcLit.toString(),"");
			:}
			| compositeLit
			{:
				RESULT = "";
			:};


compositeLit	::=	literalType literalValue
					{:
						RESULT = "";
					:};

literalType	::=	structType
				{:
					RESULT = "";
				:}
				| arrayType
				{:
					RESULT = "";
				:}
				| sliceType
				{:
					RESULT = "";
				:}
				| TYPE typeName
				{:
					RESULT = "";
				:}
				| OPEN_SQUARE CDOTS CLOSE_SQUARE elementType
				{:
					RESULT = "";
				:};


literalValue	::=	OPEN_CURLY CLOSE_CURLY
					{:
						RESULT = "";
					:}
					| OPEN_CURLY elementList CLOSE_CURLY
					{:
						RESULT = "";
					:};


elementList	::=	keyedElement
				{:
					RESULT = "";
				:}
				| keyedElement COMMA elementList
				{:
					RESULT = "";
				:};


keyedElement	::=	element
					{:
						RESULT = "";
					:}
					| key COLON element
					{:
						RESULT = "";
					:};


key	::=	fieldName
		{:
			RESULT = "";
		:}
		| literalValue
		{:
			RESULT = "";
		:};

fieldName	::= IDENTIFIER
				{:
					RESULT = "";
				:};


element	::= expression
			{:
				RESULT = "";
			:}
			| literalValue
			{:
				RESULT = "";
			:};

basicLit	::=	INTLIT:int_lit
				{:
					//System.out.println("HNA " + int_lit.toString());
				    RESULT = new Container(int_lit.toString(),"");
				:}
				| STRING_LIT:s
				{:
				    RESULT = new Container(s.toString(),"");
				:};

operandName	::=	IDENTIFIER:id
				{:
				    RESULT = new Container(id.toString(),"");
				:}
				| qualifiedIdent:q_id
				{:
				    RESULT = new Container(q_id.toString(),"");
				:};


qualifiedIdent	::=	DOT packageName DOT IDENTIFIER:id
					{:
					    RESULT = id;
					:};


functionLit	::=	FUNC function
				{:
					RESULT = "";
				:};


function	::=	signature functionBody:funcBody
				{:
					RESULT = "begin_func;\n" + funcBody + "\nend_func;";
				:};

signature	::=	parameters
				{:
					RESULT = "";
				:}
				| parameters result
				{:
					RESULT = "";
				:};


result	::=	parameters
			{:
				RESULT = "";
			:}
			| OPEN_PARAN type CLOSE_PARAN
			{:
				RESULT = "";
			:};

parameters	::=	OPEN_PARAN CLOSE_PARAN
				{:
					RESULT = "";

				:}
				| OPEN_PARAN parameterList CLOSE_PARAN
				{:
					RESULT = "";
				:};


parameterList	::=	parameterDecl
					{:
						RESULT = "";
					:}
					| parameterDecl COMMA parameterList
					{:
						RESULT = "";
					:};


parameterDecl	::= identifierList type
					{:
						RESULT = "";
					:}
					| identifierList CDOTS type
					{:
						RESULT = "";
					:};

functionBody	::= block:b
					{:
						RESULT = b;
					:};


block	::= OPEN_CURLY statementList:statList CLOSE_CURLY
			{:
				//System.out.println("YALLA " + statList);
				RESULT = statList;
			:};


statementList	::=	statement:stat statementList:statList
					{:
						RESULT = stat;
						if(!statList.equals("")) RESULT = RESULT + "\n" + statList;
					:}
					|
					{:
						RESULT = "";
					:};

packageClause	::=	PACKAGE packageName
					{:
						RESULT = "";
					:};


importDecls	::=	importDecl optionalSemiColon importDecls
				{:
					RESULT = "";
				:}
				|
				{:
					RESULT = "";
				:};

importDecl	::=	IMPORT	importSpec
				{:
					RESULT = "";
				:}
				| IMPORT OPEN_PARAN importSpecs CLOSE_PARAN
				{:
					RESULT = "";
				:};

importSpecs	::=	importSpec optionalSemiColon importSpecs
				{:
					RESULT = "";
				:}
				|
				{:
					RESULT = "";
				:};

importSpec	::=	importPath:path
				{:
					RESULT = path;
				:}
				| DOT importPath:path
				{:
					RESULT = "." + path;

				:}
				| packageName:pName importPath:path
				{:
					RESULT = pName + "" + path;
				:};

importPath	::=	STRING_LIT:lit
				{:
					RESULT = lit;
				:};

packageName	::=	IDENTIFIER:id
				{:
					RESULT = id;
				:};


optionalSemiColon	::=	SEMI_COLON
						{:
							RESULT = "";
						:}
						|
						{:
							RESULT = "";
						:};


assignOp	::=	addOp:o EQUAL:e
				{:
				    RESULT = o.toString() + " " + e.toString();
				:} %prec EQUAL
				| mulOp:o EQUAL:e
				{:
				    RESULT = o.toString() + " " + e.toString();
				:} %prec EQUAL
				| EQUAL:e
				{:
				    RESULT = " " + e.toString() + " ";
				:};


binaryOp	::= OR_OP:o
				{:
				    RESULT = o.toString();
				:}
				| AND_OP:o
				{:
				    RESULT = o.toString();
				:}
				| REL_OP:o
				{:
				    RESULT = o.toString();
				:}
				| addOp:o
				{:
				    RESULT = o.toString();
				:}
				| mulOp:o
				{:
				    RESULT = o.toString();
				:};

addOp	::=	PLUS:o
			{:
			    RESULT = o.toString();
			:}
			| MINUS:o
			{:
			    RESULT = o.toString();
			:}
			| BAR:o
			{:
			    RESULT = o.toString();
			:};


mulOp	::=	ASTRISK:o
			{:
			    RESULT = o.toString();
			:}
			| SLASH:o
			{:
			    RESULT = o.toString();
			:}
			| SHIFT_LEFT:o
			{:
			    RESULT = o.toString();
			:}
			| SHIFT_RIGHT:o
			{:
			    RESULT = o.toString();
			:}
			| PERCENT:o
			{:
			    RESULT = o.toString();
			:}
			| AMBERSAND:o
			{:
			    RESULT = o.toString();
			:};


unaryOp	::=	PLUS:o
			{:
			    RESULT = o.toString();
			:}
			| MINUS:o
			{:
			    RESULT = o.toString();
			:}
			| EXCLAMATION:o
			{:
			    RESULT = o.toString();
			:}
			| ASTRISK:o
			{:
			    RESULT = o.toString();
			:}
			| AMBERSAND:o
			{:
			    RESULT = o.toString();
			:}
			| LESS_DASH:o
			{:
			    RESULT = o.toString();
			:};
